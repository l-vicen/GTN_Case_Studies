import matplotlib.pylab as plt
import streamlit as st
import numpy as np
from cycler import cycler
import Macros
from matplotlib.ticker import AutoMinorLocator
import seaborn as sns

import egttools as egt
from egttools.analytical.utils import (calculate_gradients, find_roots, check_replicator_stability_pairwise_games)
from egttools.plotting.simplified import plot_replicator_dynamics_in_simplex
from egttools.plotting import plot_gradients
from egttools.behaviors.NormalForm.TwoActions import (Cooperator, Defector, Random)
from egttools.plotting.simplified import plot_pairwise_comparison_rule_dynamics_in_simplex_without_roots

st.markdown("# Normal-Form-Game: Evolution based-on Replicator Dynamics")

st.markdown("## Inputs")
population = 100
nb_generations = 1000
beta = 0.44
mu = 1/population
game_iterations = 10

selected_payoff = st.selectbox("Select the desired payoff matrix representing a local model.", Macros.LOCAL_MODELS, key = 1)

# egt.analytical.replicator_equation_n_player()

st.markdown("### Payoff Matrix")
A = Macros.LOCAL_MODEL_PAYOFF_DICT[selected_payoff]
st.write(A)

strategies = [Cooperator(), Defector(), Random()]
game = egt.games.NormalFormGame(game_iterations, A, strategies)
strategy_labels = [strategy.type().replace("NFGStrategies::", '') for strategy in strategies]

st.markdown("### Expected Payoff")
st.write(game.expected_payoffs())

numericalEvolver = egt.numerical.PairwiseComparisonNumerical(population, game, nb_generations)
numericalEvolverOutput = numericalEvolver.run(nb_generations, beta, mu, [100, 0, 0])

colors = sns.color_palette("colorblind", len(strategies))
plt.rc('axes', prop_cycle=(cycler('color', colors)))
fig, ax = plt.subplots(figsize=(10, 4))
lines = ax.plot(np.arange(1e3+1)[::100], numericalEvolverOutput[::100]/population)
plt.setp(lines, linewidth=2)
ax.legend([s for s in strategy_labels], frameon=False, fontsize=12)
ax.set_ylabel('k/Z', fontsize=15, fontweight='bold')
ax.set_xlabel('generation', fontsize=15, fontweight='bold')
ax.set_xscale('log')
ax.set_xlim(1, 1e3)
ax.yaxis.set_minor_locator(AutoMinorLocator())
ax.tick_params(axis='x', which='both', direction='in', labelsize=15, width=2)
ax.tick_params(axis='y', which='both', direction='in', labelsize=15, width=2)
st.pyplot(fig)

fig, ax = plt.subplots(figsize=(12,10))
simplex, gradient_function, game, evolver = plot_pairwise_comparison_rule_dynamics_in_simplex_without_roots(payoff_matrix =game.expected_payoffs(), group_size = 2, population_size = population, beta = beta, ax=ax)
transitions = evolver.calculate_transition_matrix(beta=beta, mu=mu)
sd = egt.utils.calculate_stationary_distribution(transitions.transpose())
plot = (simplex.draw_triangle()
            .add_vertex_labels(["Cooperator", "Free-rider", "Dynamic"], epsilon_bottom=0.1, epsilon_top=0.03)
            .draw_stationary_distribution(sd, alpha=1, shrink=0.5,edgecolors='gray', cmap='binary', shading='gouraud', zorder=0)
            .draw_gradients(zorder=2, linewidth=1.5)
            .add_colorbar(shrink=0.5))
ax.axis('off')
ax.set_aspect('equal')

plt.xlim((-.05,1.05))
plt.ylim((-.02, simplex.top_corner + 0.05))

st.markdown("## Simplex")
st.pyplot(fig)